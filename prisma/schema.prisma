// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  applications Application[]
  
  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  applications Application[]
  templates    Template[]
  
  @@map("services")
}

model Application {
  id          String           @id @default(cuid())
  trackingNumber String         @unique
  status      ApplicationStatus @default(PENDING)
  data        Json             // Form data as JSON
  notes       String?
  userId      String
  serviceId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  documents Document[]
  
  @@map("applications")
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  content      String   // Generated document content
  filePath     String?  // Optional file path for storage
  applicationId String
  templateId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  template   Template?   @relation(fields: [templateId], references: [id])
  
  @@map("documents")
}

model Template {
  id        String   @id @default(cuid())
  name      String
  content   String   // Template content with placeholders
  serviceId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  documents Document[]
  
  @@map("templates")
}

enum Role {
  USER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}